var search_data = {"index":{"searchIndex":["closurevalidator","dirt","memorypersister","memoryrecord","missingrecorderror","model","nopersistererror","relation","role","toomanyrecordserror","transactionerror","existencevalidator","persister","persisting","presencevalidator","selfexistencevalidator","validating","==()","==()","==()","all()","class()","clear()","collect()","delete()","delete()","each()","empty?()","error_message()","error_message()","error_message()","error_message()","errors()","exists?()","find()","first()","for()","load()","load()","load_by()","method_missing()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","respond_to?()","save()","save()","to_hash()","transaction()","update()","valid?()","valid?()","valid?()","valid?()","valid?()","where()","readme"],"longSearchIndex":["closurevalidator","dirt","dirt::memorypersister","dirt::memoryrecord","dirt::missingrecorderror","dirt::model","dirt::nopersistererror","dirt::relation","dirt::role","dirt::toomanyrecordserror","dirt::transactionerror","existencevalidator","persister","persisting","presencevalidator","selfexistencevalidator","validating","dirt::model#==()","dirt::role#==()","persisting#==()","dirt::memorypersister#all()","dirt::role#class()","persister::clear()","dirt::relation#collect()","dirt::memorypersister#delete()","persisting#delete()","dirt::relation#each()","dirt::relation#empty?()","closurevalidator#error_message()","existencevalidator#error_message()","presencevalidator#error_message()","selfexistencevalidator#error_message()","validating#errors()","dirt::memorypersister#exists?()","dirt::memorypersister#find()","dirt::relation#first()","persister::for()","dirt::memorypersister#load()","persisting#load()","persisting#load_by()","dirt::role#method_missing()","closurevalidator::new()","dirt::memorypersister::new()","dirt::model::new()","dirt::relation::new()","dirt::role::new()","existencevalidator::new()","persisting::new()","presencevalidator::new()","selfexistencevalidator::new()","validating::new()","dirt::role#respond_to?()","dirt::memorypersister#save()","persisting#save()","dirt::model#to_hash()","persister::transaction()","dirt::model#update()","closurevalidator#valid?()","existencevalidator#valid?()","presencevalidator#valid?()","selfexistencevalidator#valid?()","validating#valid?()","dirt::memorypersister#where()",""],"info":[["ClosureValidator","","ClosureValidator.html","","<p>Takes a block, and uses it to determine validity,\n"],["Dirt","","Dirt.html","",""],["Dirt::MemoryPersister","","Dirt/MemoryPersister.html","","<p>An in-memory implementation of persistence.\n"],["Dirt::MemoryRecord","","Dirt/MemoryRecord.html","",""],["Dirt::MissingRecordError","","Dirt/MissingRecordError.html","",""],["Dirt::Model","","Dirt/Model.html","","<p>Common class for all model objects within the system.\n"],["Dirt::NoPersisterError","","Dirt/NoPersisterError.html","",""],["Dirt::Relation","","Dirt/Relation.html","",""],["Dirt::Role","","Dirt/Role.html","","<p>Roles are part of the DCI system design paradigm. They decorate a model\nobject to extend its behaviour …\n"],["Dirt::TooManyRecordsError","","Dirt/TooManyRecordsError.html","",""],["Dirt::TransactionError","","Dirt/TransactionError.html","",""],["ExistenceValidator","","ExistenceValidator.html","","<p>Tests for whether the property referenced by an id is saved in the\nappropriate persister. This validator …\n"],["Persister","","Persister.html","","<p>This Persister registry is the source for all persisters in the system.\nRegister persisters here with …\n"],["Persisting","","Persisting.html","","<p>Role for adding persistability to model objects.\n"],["PresenceValidator","","PresenceValidator.html","","<p>Tests whether the given property is set (ie non-nil)\n<p>For more about validation, see Validating\n"],["SelfExistenceValidator","","SelfExistenceValidator.html","","<p>Tests for the existence of the given id in the persister.\n<p>For more about validation, see Validating\n"],["Validating","","Validating.html","","<p>A Role for testing whether the wrapped object is valid, using the list of\nvalidators provided in the …\n"],["==","Dirt::Model","Dirt/Model.html#method-i-3D-3D","(other)",""],["==","Dirt::Role","Dirt/Role.html#method-i-3D-3D","(other)",""],["==","Persisting","Persisting.html#method-i-3D-3D","(other)",""],["all","Dirt::MemoryPersister","Dirt/MemoryPersister.html#method-i-all","()","<p>Returns the list of all records.\n"],["class","Dirt::Role","Dirt/Role.html#method-i-class","()",""],["clear","Persister","Persister.html#method-c-clear","()","<p>Forgets about all previously saved persisters.\n"],["collect","Dirt::Relation","Dirt/Relation.html#method-i-collect","(&block)",""],["delete","Dirt::MemoryPersister","Dirt/MemoryPersister.html#method-i-delete","(id)","<p>Removes the record with the given id.\n"],["delete","Persisting","Persisting.html#method-i-delete","(id)","<p>Removes the decorated object from the appropriate persister.\n"],["each","Dirt::Relation","Dirt/Relation.html#method-i-each","(&block)",""],["empty?","Dirt::Relation","Dirt/Relation.html#method-i-empty-3F","()",""],["error_message","ClosureValidator","ClosureValidator.html#method-i-error_message","(validated)",""],["error_message","ExistenceValidator","ExistenceValidator.html#method-i-error_message","(validated)",""],["error_message","PresenceValidator","PresenceValidator.html#method-i-error_message","(validated)",""],["error_message","SelfExistenceValidator","SelfExistenceValidator.html#method-i-error_message","(validated)",""],["errors","Validating","Validating.html#method-i-errors","()","<p>Returns a list of the string messages returned from the validators that\nhave failed.\n"],["exists?","Dirt::MemoryPersister","Dirt/MemoryPersister.html#method-i-exists-3F","(id)","<p>determines whether a record exists with the given id\n"],["find","Dirt::MemoryPersister","Dirt/MemoryPersister.html#method-i-find","(params)",""],["first","Dirt::Relation","Dirt/Relation.html#method-i-first","()",""],["for","Persister","Persister.html#method-c-for","(klass, persister=nil)","<p>If persister is supplied, then this sets the persister for the given class,\notherwise it returns the …\n"],["load","Dirt::MemoryPersister","Dirt/MemoryPersister.html#method-i-load","(id)","<p>Returns the record with the given id.\n"],["load","Persisting","Persisting.html#method-i-load","(id)","<p>Loads persisted data into the decorated object\n"],["load_by","Persisting","Persisting.html#method-i-load_by","(attrs)","<p>Loads from the first record that matches the given attributes.\n"],["method_missing","Dirt::Role","Dirt/Role.html#method-i-method_missing","(method, *args, &block)","<p>Attempts to run the missing method on the decorated object before exploding\nas normal, with a light tingling …\n"],["new","ClosureValidator","ClosureValidator.html#method-c-new","(block, message_block)",""],["new","Dirt::MemoryPersister","Dirt/MemoryPersister.html#method-c-new","()",""],["new","Dirt::Model","Dirt/Model.html#method-c-new","(params={})","<p>Initializes a new instance of the class. The parameter hash takes whatever\nproperties of the specific …\n"],["new","Dirt::Relation","Dirt/Relation.html#method-c-new","(records)",""],["new","Dirt::Role","Dirt/Role.html#method-c-new","(decorated)","<p>Takes the decorated object.\n"],["new","ExistenceValidator","ExistenceValidator.html#method-c-new","(property, opts)","<p>Takes the symbol name of the property to validate, and an options hash.\n<p>Options include:\n<p><p>as &mdash; The class of …\n"],["new","Persisting","Persisting.html#method-c-new","(decorated, id=nil)",""],["new","PresenceValidator","PresenceValidator.html#method-c-new","(property)","<p>Takes the property name as symbol\n"],["new","SelfExistenceValidator","SelfExistenceValidator.html#method-c-new","(type, id)",""],["new","Validating","Validating.html#method-c-new","(decorated, validators)","<p>Takes the decorated object and then the list of validators. See Role for\nmore on decoration.\n"],["respond_to?","Dirt::Role","Dirt/Role.html#method-i-respond_to-3F","(method, privates = false)",""],["save","Dirt::MemoryPersister","Dirt/MemoryPersister.html#method-i-save","(data, id=nil)","<p>Saves the record to the array either under the given id, or a new one if\nnone is provided,\n"],["save","Persisting","Persisting.html#method-i-save","(id=nil)","<p>Saves the decorated object with the appropriate persister.\n"],["to_hash","Dirt::Model","Dirt/Model.html#method-i-to_hash","()","<p>The hash representation of any model object maps attribute names as symbols\nto their values, like the …\n"],["transaction","Persister","Persister.html#method-c-transaction","(persister_list=[], &block)",""],["update","Dirt::Model","Dirt/Model.html#method-i-update","(params)","<p>Updates the properties of this instance. The parameter hash takes whatever\nproperties of the specific …\n"],["valid?","ClosureValidator","ClosureValidator.html#method-i-valid-3F","(validated)",""],["valid?","ExistenceValidator","ExistenceValidator.html#method-i-valid-3F","(validated)",""],["valid?","PresenceValidator","PresenceValidator.html#method-i-valid-3F","(validated)",""],["valid?","SelfExistenceValidator","SelfExistenceValidator.html#method-i-valid-3F","(validated)","<p><code>true</code> if the validated object exists in the persister.\n"],["valid?","Validating","Validating.html#method-i-valid-3F","()","<p>Returns <code>true</code> <em>iff</em> every validator passes.\n"],["where","Dirt::MemoryPersister","Dirt/MemoryPersister.html#method-i-where","(params)",""],["README","","README.html","","<p>DIRT DCI Implementation in Ruby by Tenjin # # # = Dirt # Dirt (DCI\nImplemented in Ruby by Tenjin) is …\n"]]}}